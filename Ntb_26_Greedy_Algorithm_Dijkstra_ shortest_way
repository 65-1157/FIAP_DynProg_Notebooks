{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"108JSGXWV1tN3BLQefPIT3BxC73ubrds5","timestamp":1713550868926}],"authorship_tag":"ABX9TyNGdmgOUeUZZPkbo+WngtDS"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## 1 - Introduction"],"metadata":{"id":"6R7LtDvr3rtj"}},{"cell_type":"markdown","source":["#### As seen, the Greedy Algorithm provide a solution, which is not optimal necessarily. One combined application of Graph theory and Greedy Algorithm is the Dijkstra Algorithm, known also as the 'shortest path problem'."],"metadata":{"id":"pUz-uFiCFBpp"}},{"cell_type":"markdown","source":["#### Since we have points linked among themselves, we need to find the shortest way from one start point (definebe by us) and a final point (also defined by us). Thus, we need to set the points and connections, as a Graph or any other represenation, like a grid."],"metadata":{"id":"61fXgsq5FcvT"}},{"cell_type":"markdown","source":["#### Assume we have the following feasible paths:\n","### Sao Paulo –> Rio –> Salvador –> Paris.\n","### Sao Paulo –> Belo Horizonte –> Salvador –> Lisboa –> Paris.\n","### Sao Paulo –> Salvador –> Natal –> Madrid –> Paris."],"metadata":{"id":"g_LJiYIDnIAq"}},{"cell_type":"markdown","source":["#### Starting node (city) = Sao Paulo\n","#### End node (city) = Paris\n","#### Between nodes = distance (variable due to Geography).\n","#### This distance will be assigned as a value related to the node. Here we can find a perfect analogy to the Graph (Abstract Data Type)."],"metadata":{"id":"tXKAnQcvoe63"}},{"cell_type":"markdown","source":["#### The algorithm will check all the possible connections that lead to the final destination, and will compute the smallest value sum. The nodes associated will the shortest searched path."],"metadata":{"id":"XCNp2lAx1ueW"}},{"cell_type":"markdown","source":["#### From the start point, the algorithm will check every node and compute the associated value, keeping the smallest and the associated node. Thus, this procedure will be repeated till no other available node, which means to reach the final destination.\n","#### Once the node is visited, it receives a denomination 'visited' or \"checked\", desmissing new future confirmation, while the algorithm repeats its logic. At a specific node, all connections are checked, even from the node already visited."],"metadata":{"id":"LNhuvZnh2Hhs"}},{"cell_type":"markdown","source":["## 2 - Graph definition"],"metadata":{"id":"k6fGJWpQ4LlE"}},{"cell_type":"code","source":["import sys\n","\n","class Graph(object):\n","    def __init__(self, nodes, init_graph):\n","        self.nodes = nodes\n","        self.graph = self.construct_graph(nodes, init_graph)\n","\n","    def construct_graph(self, nodes, init_graph):\n","      # function to construct a graph or possible ways connecting cities\n","      # nodes = set of cities or points to be visited in the way.\n","      # init_graph = ?????\n","        '''\n","        This method makes sure the graph has two-way connections, valid in both senses.\n","        '''\n","        graph = {} # dictionary\n","        for node in nodes:\n","            graph[node] = {} # at every node, there will be a graph.\n","\n","        graph.update(init_graph)\n","\n","        for node, edges in graph.items():\n","          # node = city to be visited\n","          # edge = path to be travelled\n","            for adjacent_node, value in edges.items():\n","              # adjacent_node = any node connected directly to the node\n","                if graph[adjacent_node].get(node, False) == False:\n","                    graph[adjacent_node][node] = value # distance = value\n","\n","        return graph\n","\n","    def get_nodes(self):\n","        # fucntion to return the nodes of the graph.\n","        return self.nodes\n","\n","    def get_outgoing_edges(self, node):\n","        # function to collect the neighbors/surrounding nodes around a node.\n","        connections = []\n","        for out_node in self.nodes:\n","            if self.graph[node].get(out_node, False) != False:\n","                connections.append(out_node)\n","        return connections\n","\n","    def value(self, node1, node2):\n","        # function to return the value of an edge between two nodes/cities.\n","        return self.graph[node1][node2]"],"metadata":{"id":"NTu-5yzA4KXW","executionInfo":{"status":"ok","timestamp":1713558618815,"user_tz":180,"elapsed":8,"user":{"displayName":"Andre Marques","userId":"13386997495052440502"}}},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":["## 3 - Dijkstra Algorithm"],"metadata":{"id":"uMsZ3ETw8Auh"}},{"cell_type":"code","source":["def dijkstra_alg(graph, start_node):\n","  # graph = the set of nodes and edges to be studied\n","  # start_node = the first node from where the study starts\n","  unvisited_nodes = list(graph.get_nodes())\n","  shortest_path = {}\n","  previous_nodes = {}\n","  # Initially, all the distances will be set to 'infinity' or 'maxsize'.\n","  max_value = sys.maxsize\n","  for node in unvisited_nodes:\n","      shortest_path[node] = max_value\n","  # The starting node's value = 0.\n","  shortest_path[start_node] = 0 # start action\n","  while unvisited_nodes:\n","    current_min_node = None\n","    for node in unvisited_nodes: # Iterate over the nodes\n","        if current_min_node == None:\n","            current_min_node = node\n","        elif shortest_path[node] < shortest_path[current_min_node]:\n","            current_min_node = node\n","    # The current node's neighbors and updates their distances:\n","    neighbors = graph.get_outgoing_edges(current_min_node)\n","    for neighbor in neighbors:\n","        tentative_value = shortest_path[current_min_node] + graph.value(current_min_node, neighbor)\n","        if tentative_value < shortest_path[neighbor]:\n","            shortest_path[neighbor] = tentative_value\n","            # Update the best path to the current node\n","            previous_nodes[neighbor] = current_min_node\n","    unvisited_nodes.remove(current_min_node)\n","\n","  return previous_nodes, shortest_path"],"metadata":{"id":"3H5WInJW8KsZ","executionInfo":{"status":"ok","timestamp":1713558727368,"user_tz":180,"elapsed":351,"user":{"displayName":"Andre Marques","userId":"13386997495052440502"}}},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":["#### Function to print the algorithm application"],"metadata":{"id":"JRDdqXTyEKYO"}},{"cell_type":"code","source":["def print_result(previous_nodes,\n","                 shortest_path,\n","                 start_node,\n","                 target_node):\n","    path = []\n","    node = target_node\n","\n","    while node != start_node:\n","        path.append(node)\n","        node = previous_nodes[node]\n","\n","    # Add the start node - obvious!!\n","    path.append(start_node)\n","\n","    print(\"Best path & value of {}.\".format(shortest_path[target_node]))\n","    print(\" -> \".join(reversed(path)))"],"metadata":{"id":"XkMhnb8k-q0S","executionInfo":{"status":"ok","timestamp":1713558940882,"user_tz":180,"elapsed":246,"user":{"displayName":"Andre Marques","userId":"13386997495052440502"}}},"execution_count":8,"outputs":[]},{"cell_type":"markdown","source":["## 4 - Application"],"metadata":{"id":"Y3X3Su4S-3R3"}},{"cell_type":"code","source":["nodes = [\"Sao Paulo\",\n","         \"Rio\", \"Belo Horizonte\", \"Salvador\",\n","         \"Natal\", \"Lisboa\", \"Madrid\",\n","         \"Paris\"]\n","\n","init_graph = {}\n","for node in nodes:\n","    init_graph[node] = {}\n","# values input = distances between nodes\n","init_graph[\"Sao Paulo\"][\"Rio\"] = 500\n","init_graph[\"Sao Paulo\"][\"Belo Horizonte\"] = 600\n","init_graph[\"Sao Paulo\"][\"Salvador\"] = 1800\n","init_graph[\"Rio\"][\"Salvador\"] = 1500\n","init_graph[\"Belo Horizonte\"][\"Salvador\"] = 1000\n","init_graph[\"Salvador\"][\"Natal\"] = 600\n","init_graph[\"Salvador\"][\"Paris\"] = 6000\n","init_graph[\"Salvador\"][\"Lisboa\"] = 2000\n","init_graph[\"Natal\"][\"Madrid\"] = 2000\n","init_graph['Lisboa']['Paris'] = 1000\n","init_graph['Madrid']['Paris'] = 700\n"],"metadata":{"id":"0w-2YClv_cQt","executionInfo":{"status":"ok","timestamp":1713558943393,"user_tz":180,"elapsed":252,"user":{"displayName":"Andre Marques","userId":"13386997495052440502"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["graph = Graph(nodes, init_graph)"],"metadata":{"id":"Zu-XkLjqCly5","executionInfo":{"status":"ok","timestamp":1713558944469,"user_tz":180,"elapsed":4,"user":{"displayName":"Andre Marques","userId":"13386997495052440502"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["previous_nodes, shortest_path = dijkstra_alg(graph=graph, start_node=\"Sao Paulo\")"],"metadata":{"id":"Dutvqb2eCnG0","executionInfo":{"status":"ok","timestamp":1713558945309,"user_tz":180,"elapsed":1,"user":{"displayName":"Andre Marques","userId":"13386997495052440502"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["print_result(previous_nodes, shortest_path, start_node=\"Sao Paulo\", target_node=\"Paris\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3xgmoC8AC1Gr","executionInfo":{"status":"ok","timestamp":1713558945705,"user_tz":180,"elapsed":4,"user":{"displayName":"Andre Marques","userId":"13386997495052440502"}},"outputId":"523b020f-22ee-4b68-ea1d-46e70193b188"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Best path & value of 4600.\n","Sao Paulo -> Belo Horizonte -> Salvador -> Lisboa -> Paris\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"GMP8tbQxDFB3"},"execution_count":null,"outputs":[]}]}